route[REQINIT] {
    set_reply_no_connect();
    force_rport();
        if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        
        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }
    if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent|pplsip|Z 3.14.38765 rv2.8.3|PolycomVVX-VVX_410-UA5.5.1.11526|cisco|avaya|eyeBeam|pbx|Linksys|china|VOIP|Free") {
        xlog("sip scanners from $si\n");
        sl_send_reply("404", "Not found");
        exit;
    }
    if is_method("OPTIONS") && $si ==("1.1.1.1"){
        xlog("sip scanners from $si\n");
        sl_send_reply("503", "Service Unavailable");
        exit;
    }

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("17895", "7")) {
        xlog("Malformed SIP request from $si:$sp\n");
        exit;
    }
}

route[AUTH]{
    if is_method("REGISTER")||(from_uri==myself){
    if(!auth_check("$fd", "subscriber", "1")){
        auth_challenge("$fd", "0");
        exit;
    }
    consume_credentials();
}
}

route[REGISTRAR]{
    if(!is_method("REGISTER"))return;
    if(!save("location")){
        sl_reply_error();
    }
    exit;
}


route[NATMANAGE]{
    force_rport();
    if is_request() && is_method("REGISTER"){
        fix_nated_register();
        return;
    }
    fix_nated_contact();
}


route[LOCATION]{
    if(!lookup("location")){
        return(-1);
    }
    setsflag(FLAG_TO_CLIENT);
    return(1);
}


route[RELAY]{
    if(is_method("INVITE")){
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }
    if(!t_is_set("branch_route"))t_on_branch("MANAGE_BRANCH");
    if(!t_relay()){
        sl_reply_error();
    }
    exit;
}


route[ROUTING]{
    if(is_method("INVITE")&&!has_totag()){
        remove_hf("Route");
        record_route();
    }
}


route[WITHINDLG]{
    if(!has_totag())return(-1);
    if(loose_route())return(1);
    if(is_method("ACK")){
        if(t_check_trans()){
            return(1);
            }else{
                exit;

            }
        }   
sl_send_reply("404", "Not here");
exit;
}

route[CANCELING]{
    if(is_method("CANCEL")){
        if(!t_check_trans()) {
            exit;
        }
    }
}

route[SDPMANAGE]{
    if(is_request() && is_method("BYE")) || (is_reply()&&$rs>299)rtpengine_manage();
    if!has_body("application/sdp")return;
    rtpengine_manage("replace-origin replace-session-connection SIP-source-address $avp(direction)");
}



route[TO_APIFONICA]{
   route(SETCALLERID);
   if(!cr_route("default", "test", "$rU", "$rU", "call_id")){
        return(-1);
    
   }
}

route[SETCALLERID]{
        sql_pvquery("ca", "select callerid from externcallerid where exten='$fU'","$avp(fU)");
        if($avp(fU) != ""||$avp(fU) != 0) $fU = $avp(fU);
}



route[VIA_REG]{
    dlg_manage();
    sql_pvquery("ca", "select r_username, auth_username, auth_password, realm, l_domain, r_domain from uacreg", "$avp(fromName), $avp(uname), $avp(passwrd), $avp(passwd), $avp(realm), $avp(realm), $avp(l_addr), $avp(dst_ipaddr)");
    uac_replace_from("sip:$avp(fromName)@$avp(dst_ipaddr)");
    uac_replace_to("sip:$tU@$avp(dst_ipaddr)");


    $ru="sip:"+$rU+"@"+$avp(dst_ipaddr);
    remove_hf("Contact");
    $var(contact)="sip:"+$avp(fromName)+"@"+$avp(l_addr);
    insert_hf("Contact: <$var(contact)>\r\n","Call-ID");
}


route[FIXCONTACT]{
        if isflagset(FLAG_TO_CLIENT)||!issflagset(FLAG_INTERNALLY_SOURCED){
            fix_nated_contact();
            return;
        }
}


route[DISPATCH]{
        if(!ds_select_dst(GATEWAYS_SET, 4)){
            send_reply("404", "No destination");
            return(-1);            
        }
            $avp(direction)="direction=public direction=private";
            return(1);
}


route[CLASSIFY_SOURCE]{
    if(ds_is_from_list(GATEWAYS_SET)){
        if is_method("OPTIONS"){
            sl_send_reply(200, "ok");
            exit;
            }
            setsflag(FLAG_INTERNALLY_SOURCED);
            $avp(direction)="direction=private direction=public";      
    }
}

